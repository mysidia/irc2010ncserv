(1) Command classification:
	  
 signon cmds	user cmds	channel cmds  	listing cmds  
 -------------- --------------- --------------- ---------------
  NICK		 PRIVMSG (u)     PRIVMSG (c)	 WHO
  USER		 NOTICE (u)	 NOTICE (c)	 LIST
  SERVER	 KILL		 JOIN		 STATS
  PASS		 INVITE		 MODE		 ADMIN
  OPER           
  -  And so on...
  Here is how they are categorized:
   signon commands:  used in starting up some kind of status
   user commands:    the first param is a user, the action is upon a user
   channel commands: the first param is a channel, action is upon a chan
   listing commands: the first param is usually a mask, and the command
                       does some type of listing

 Using this, we can design a uniform basis on which the commands will be
  categorized.  This way, when parsing goes on, the commands can be split
  up with greater ease.  Maybe this isn't the best way of going about things,
  but it makes a sense of the command "being in the channel" or "for the nick"
  like different windows do in windows IRC clients.  This idea came when I
  was thinking about simple AOL chat, where you think your text is going
  directly to the "room", not through a protocol.  This command listing idea
  is not important.  But, this way, the commands look more organized.

(2) Function names and method of implementing protocol and commands

	I have taken the liberty to devise a scheme in which we will follow to
	 implement commands.  Here is a basic structure of a typical command:
	 (should they be c_functions or m_functions?)
	 
 *************************************************

/*
** msgptr will be an extern global that will be set during parsing
** parv[0] will not not be sender, but it will be the first param
**
** actually.. msgptr should probably be passed around instead.
*/


/*
** m_xcmdx()
**
**  Does (whatever xcmdx does)
**
*/
	 
int m_xcmdx(Client *cptr, Client *sptr, int parc, char *parv[])
{
	Client *acptr;
	char *s;

	if (!client_can_use_xcmdx(cptr, sptr)
		return(0);
	if (!check_params_xcmdx(cptr, sptr, parc, parv))
		return(0);
	for (;s = token_list(parv[1]);)
		{
			acptr = find_client(s);
			if (!acptr)
				return send_nosuchnick(cptr, s);
			  ...
			 other qualifications
			  ...
			do_xcmdx(cptr, sptr, parc, parv+1, acptr);
		}
	return(0);
}

int client_can_use_xcmdx(Client *cptr, Client *sptr)
{
	if (!registered_user(sptr))
	{
		if (!IsServer(sptr))
			send_notregistered(sptr);
		return(0);
	}
	if (is_hushed(sptr))
	{
		send_hushnotice(sptr);
		return(0);
	}
	return(1);
}

int check_params_xcmdx(Client *cptr, Client *sptr, int parc, char *parv[])
{
	if (parc < x)
	{
		send_needmoreparams(sptr, "XCMDX");
		return(0);
	}
	return 1;
}

 do_xcmdx will do the command for that individual user
 
 *********************************		

	But, here is an alternative way of doing this.  This will provide a
	 more uniform, high-level way of setting up commands.  In the message
	 tab, each message will include different usages of it.  Here is
	 the basic structure:
	 
	{ "command", functionname, required_status,
		{
			{ usage 1's param number, param 1, param 2, .... },
			{ usage 2's param number, param 1, param 2, .... },
			...
		};
	},
	
	Now, here is what a few would look like:
	{ "privmsg", do_privmsg, S_REGUSER|S_CANSENDC|S_CANSENDU,
		{
			2, { P_NICK|P_CHAN|P_LIST, P_TEXT };
		};
	},
	{ "kill", do_kill, S_REGUSER|S_OPRIV,
		{
			2, { P_NICK, P_TEXT };
		};
	},
	
	Now, this isn't what it'll look like at the end if this plan is used,
	 but it's the basic structure.
	 
 Or, we could do the old IRCD's put-everything-into-one style.
 
 
 
 
 Tell me your opinions on all of this please. :)
